#!/usr/bin/bash

echo "$0: Script started at $(date)"

# ==============================================================================
# üî• I N I T I A L I Z E
# ==============================================================================

./init.bash || exit 1

# ==============================================================================
# ‚öôÔ∏è S E T T I N G S
# ==============================================================================

set -eu || set -o errexit && set -o nounset; set -o pipefail; set +o history # Use `set -o` to list all shell settings # https://www.gnu.org/software/bash/manual/html_node/

DIVIDER="$(printf '=%.0s' {1..80})" && div() { echo "$DIVIDER"; }
VERBOSE=true
UNATTENDED=false
error_code=1 # Praesumptio
ending=Done.

abort() {
  ending=$1
  exit ${2:-1} # Default error code is 1 (common)
}

cadence() { # Callback
  set +eu || set +o errexit && set +o nounset; set +o pipefail; set -o history # Use `set -o` to list all shell settings
  [[ $error_code -ne 0 && "$ending" == Done. ]] && ending='An error occurred during execution!'
  [[ -v ending && ! -z "$ending" ]] && echo "$0: $ending"
}; trap cadence EXIT # Set the signal handler EXIT (to ensure a graceful cadence)

# ==============================================================================
# üß¨ P R E R E Q U I S I T E S
# ==============================================================================

[[ -v http_proxy ]] && unset http_proxy; [[ -v https_proxy ]] && unset https_proxy; [[ -v all_proxy ]] && unset all_proxy; [[ -v HTTP_PROXY ]] && unset HTTP_PROXY; [[ -v HTTPS_PROXY ]] && unset HTTPS_PROXY; [[ -v ALL_PROXY ]] && unset ALL_PROXY; [[ ! -v http_proxy && ! -v https_proxy && ! -v all_proxy && ! -v HTTP_PROXY && ! -v HTTPS_PROXY && ! -v ALL_PROXY ]] && echo 'Environment variables for proxying have been reset!'

cd "$(dirname "$0")"

# ==============================================================================
# üí• B A N G
# ==============================================================================

[[ -d ./env ]] && rm -rf ./env; python3 -m venv env # Creating virtual environment (Python)

if [[ ! -d ./env ]]; then # Check the existence of a virtual environment (Python)
  abort "Error: Directory \`$(pwd)/env\` doesn‚Äôt exists."
fi

source env/bin/activate; if [[ $? -ne 0 ]]; then # Activate virtual environment (Python)
  abort "Failed to activate Python virtual environment."
fi

python3 -m pip install --upgrade pip setuptools wheel virtualenv # Use `python -m pip cache purge` if you've troubles
# if ! pip show requests &>/dev/null; then
#   echo "Installing requests..."
#   pip install requests
# fi
python3 -m pip install -r requirements.txt # python -m pip install -r requirements-dev.txt

# ------------------------------------------------------------------------------
# üëÆ‚Äç‚ôÄÔ∏è Rights Policy
# ------------------------------------------------------------------------------

[[ -f ./BANG  ]] && chmod u+x ./BANG
[[ -f ./BUILD ]] && chmod u+x ./BUILD
[[ -f ./SAVE  ]] && chmod u+x ./SAVE

# ==============================================================================
# üöß T E R M I N A T E
# ==============================================================================

deactivate && error_code=0
exit $error_code # üî≥ Q.E.D.

# ==============================================================================
# üß∑ A L S O
# ==============================================================================

# - https://www.shellcheck.net/
# - https://chmod-calculator.com/
# - https://crontab.guru/
# - https://snarky.ca/why-you-should-use-python-m-pip/